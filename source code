# house_price_forecast.py

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split, cross_val_score, GridSearchCV
from sklearn.linear_model import LinearRegression, Ridge
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_squared_error, r2_score
from xgboost import XGBRegressor

# Load dataset
df = pd.read_csv('house_prices.csv')  # Replace with your dataset path

# Data cleaning
df.dropna(axis=0, subset=['SalePrice'], inplace=True)
y = df.SalePrice
df.drop(['SalePrice'], axis=1, inplace=True)

# Select numeric features only
X = df.select_dtypes(include=[np.number]).copy()
X.fillna(X.mean(), inplace=True)

# Feature Engineering (optional: enhance this)
X['OverallQual_Sqft'] = X['OverallQual'] * X['GrLivArea']

# Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define models
models = {
    "Linear Regression": LinearRegression(),
    "Ridge Regression": Ridge(alpha=1.0),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "Gradient Boosting": GradientBoostingRegressor(n_estimators=100, learning_rate=0.1, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, learning_rate=0.1, random_state=42)
}

# Train and evaluate models
results = {}

print("Training and evaluating models...\n")
for name, model in models.items():
    model.fit(X_train, y_train)
    predictions = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, predictions))
    r2 = r2_score(y_test, predictions)
    results[name] = (rmse, r2)
    print(f"{name} -> RMSE: {rmse:.2f}, RÂ²: {r2:.4f}")

# Visualize results
result_df = pd.DataFrame(results, index=["RMSE", "R2"]).T.sort_values(by="RMSE")
result_df.plot(kind='bar', secondary_y='R2', figsize=(10, 6), title="Model Performance Comparison")
plt.tight_layout()
plt.show()
